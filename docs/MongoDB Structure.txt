******************************
Common object structure

obj_type : {
	prop1 : <type - description>,
	prop2 : <type - description>
}

******************************
******************************
Common objects

PreferredName : {
	First : <string - owner's preferred first name>,
	Middle : <string - owner's preferred middle name>,
	Last : <string - owner's preferred last name>
}

TrackedString : {
	Value : <string - some string>,
	Timestamp : <datetime - the date and time of this string being created>,
	Author : <ObjectId - _id of the app user who created the string>
}

Step : {
	Name : <string - name of the step>,
	StartedDate : <datetime - when the step was started; optional>,
	CompletedDate : <datetime - when the step was completed; null means incomplete>,
	Comments : [<TrackedString - a comment about this specific step>, ...],
	SubSteps : [<Step - 1st child step that makes up this step>, ...]
}

Setting : {
	Name : <string - name of settings>,
	NormalizedName : <string - normalized name; managed by application>,
	Value : <string - may also store other types converted to string; setting value>
}

******************************
******************************
Database schema structure

database : {
	collection : [
		// thing1 definition
		thing1 : {
			prop1 : <type - description>,
			// prop2 extended description
			prop2 : <type - description>,
			object_prop : {
				sub_prop1 : <type - description>
			}
		},
		thing2 : {}
	]
}

******************************
******************************
Database schemas

users : {
	users : [
		// Describes an application user
		user : {
			_id : <ObjectId - determined by MongoDB>,
			Username : <string - username, must be unique>,
			NormalizedUsername: <string - normalized username; managed by application>,
			Email : <string - email address, must be unique>,
			NormalizedEmail : <string - normalized email; managed by application>,
			EmailConfirmed : <bool - deafult false, set true after confirm>,
			FullName : <string - User's full name>,
			PasswordHash : <string - hashed + salted>,
			PasswordSalt : <string - the salt used for this specific user's pw>,
			SecurityStamp : <string - used to notify when user security settings change>,
			FailedLoginAttempts : <int - resets on successful login>,
			LockoutEnabled : <bool>,
			LockedOutUntil : <date - UTC>
		}
	],
	roles : [
		// Describes the roles an application use might have. Used for authorization.
		role : {
			_id : <ObjectId - determined by MongoDB>,
			Name : <string - doesn't need to be unique>,
			NormalizedName : <string - unique per-role; normalization managed by application>,
			Users : [<ObjectId - unique User ID>, ...]
		}
	]
}

owners : {
	owners : [
		// Describes an owner of an asset (i.e. a student)
		owner : {
			_id : <ObjectId - determined by MongoDB>,
			Name : <string - owner's name as shown in school records>,
			NormalizedName : <string - normalized name; handled by application>,
			PreferredName : <PreferredName, see Common objects>,
			EmailAddresses : [<string - email address to use for support; in order of user preference>, ...],
			PhoneNumbers : [<string - phone numbers to use for support; in order of user preferences; just digits, no symbols>, ..]
		}
	]
}

assets : {
	types : [
		// Describes an asset type (i.e. Laptop)
		type : {
			_id : <ObjectId - determined by MongoDB>,
			Name : <string - name of asset type>,
			NormalizedName : <string - normalized version of name; managed by application>,
			Description : <long string - description of this type of asset>
		}
	],
	manufacturers : [
		// Describes an asset manufacturer along with their contact information (i.e. Lenovo)
		manufacturer : {
			_id : <ObjectId - determined by MongoDB>,
			Name : <string - Human-readable name of model>,
			NormalizedName: <string - normalized version of name; managed by application>,
			EmailAddresses : [<string - email address to use for support; in order of usefulness>, ...],
			PhoneNumbers : [<string - phone numbers to use for support; in order of usefulness; 
							just digits, no symbols, includes country code>, ..]
		}
	],
	models : [
		// Describes an asset model (i.e. P1 gen 2)
		model : {
			_id : <ObjectId - determined by MongoDB>,
			Name : <string - Human-readable name of model>,
			NormalizedName : <string - normalized verison of name; handeled by application>,
			Type : <ObjectId - the type definition's unique _id value that this model best fits>,
			ModelNumber : <string - manufaturer's standardized identifier of this model>,
			Manufacturer : <ObjectId - a manufacturer definition's unique _id value>
		}
	],
	assets : [
		// Describes a specific asset
		asset : {
			_id : <ObjectId - determined by MongoDB>,
			SerialNumber : <string - serial number of this asset>,
			Model : <ObjectId - a model definition's unique _id value>,
			Owner : <ObjectID - an owner definition's unique _id value>
		}
	],
	loaners : [
		// Describes a specific asset used as a loaner by IT
		loaner : {
			_id : <ObjectId - determined by MongoDB>,
			Name : <string - represent's the loaner's common name, i.e. [12261>,
			NormalizedName : <string - normalized version of name; managed by application>,
			Asset : <ObjectId - links to an asset definition for this loaner>,
			InInventory : <bool - whether or not this iten is currently in inventory>,
			Available : <bool - whether this item, if in inventory, is allowed to be handed out>
		}
	]
}

tickets : {
	repairs : [
		// Definition of a kind of repair
		repair : {
			_id : <ObjectId - determined by MongoDB>,
			Name : <string - name of this kind of repair>,
			// Defines what kinds of assets this repair applies to.
			//   i.e. Depot repair applies to Lenovo and Dell, but only Dell does on-site repair
			// If an array is empty, the repair will apply to any of that property
			//	 i.e. a Depot repair would have all arrays empty except for Types, which would
			//   only contain a Laptop type.
			AppliesTo : {
				Types : [<ObjectId - _id of an AssetType that this repair applies to>, ...],
				Manufacturers : [<ObjectId - _id of an AssetManufacturer that this repair applies to>, ...],
				Models : [<ObjectId - _id of an AssetModel that this repair applies to>, ...]
			},
			Steps : [<Step - 1st step of repair>, <Step - 2nd step of repair>, ...]
		}
	],
	tickets : [
		// Definition of a ticket
		ticket : {
			_id : <ObjectId - determined by MongoDB>,
			TicketId : <int - human readable ticket identifier; sequential>,
			Repair : <ObjectId - _id of the kind of repair being performed for this ticket>,
			Asset : <ObjectId - _id of the asset being repaired>,
			Technicians : [<ObjectId - _id of the app use who made the ticket>, <ObjectId - _id of another app user whoe helped on the ticket>, ...],
			Loaners : [<ObjectId - _id of an asset loaned to the client>, ...],
			Title : <string - title of the ticket for easy reference later; immutable>,
			// Description can be changed by technicians. New version will create a new
			// TrackedString entry containing the complete new description in the Description 
			// array. This allows changes to be tracked and history to be recovered.
			Description : [<TrackedString - 1st version of description>, ...],
			Comments : [<TrackedString - a comment about the ticket>, ...]
		}
	]
}

settings : {
	application : {
		setting : <Setting - some setting>
	}
}

******************************
******************************
Default entry structure

database : {
	collection : [
		{   
		    // thing1 definition
			prop1 : <type - description>,
			prop2 : <type - description>,
			object_prop : {
				sub_prop1 : <type - description>
			}
		}
	]
}

******************************
******************************
Default entries

users : {
	users : [
		{
			// The root user
			_id : <ObjectId - determined by MongoDB>,
			Username : 'root',
			NormalizedUsername: 'root',
			Email : null,
			NormalizedEmail : null,
			EmailConfirmed : false,
			FullName : 'root',
			PasswordHash : <TBD>,
			PasswordSalt : <TBD>,
			SecurityStamp : <TBD>,
			FailedLoginAttempts : 0,
			LockoutEnabled : false,
			LockedOutUntil : null
		}
	],
	roles : [
		role : {
			// Describes the roles an application use might have. Used for authorization.
			_id : <ObjectId - determined by MongoDB>,
			Name : 'Administrators',
			NormalizedName : 'Administrators',
			Users : [<root user's _id>]
		}
	]
}

owners : {
	owners : [
		owner : {
			// The IT owner
			_id : <ObjectId - determined by MongoDB>,
			FullName : 'Student Support',
			Name : 'Student Support',
			NormalizedName : 'STUDENT SUPPORT',
			PreferredName : {
				First : 'Student',
				Middle : null,
				Last : 'Support'
			},
			EmailAddresses : ['ssupport@student.neumont.edu'],
			PhoneNumbers : ['18013022860']
		}
	]
}

assets : {
	types : [
		{
			// Laptop type
			_id : <ObjectId - determined by MongoDB>,
			Name : 'Laptop',
			NormalizedName : 'LAPTOP',
			Description : 'Laptop computer'
		},
		{
			// Laptop charger type
			_id : <ObjectId - determined by MongoDB>,
			Name : 'Laptop Charger',
			NormalizedName : 'LAPTOP CHARGER',
			Description : 'Laptop charger'
		}
	],